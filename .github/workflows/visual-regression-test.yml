name: visual-regression-test

on:
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash

permissions:
  contents: write
  issues: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  vrt:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.0

      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git configuration
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Puppeteer Chrome
        run: npx puppeteer browsers install chrome

      - name: Install native dependencies
        run: sudo apt-get update && sudo apt-get install -y fonts-liberation

      - name: Build Storybook
        run: pnpm build-storybook

      - name: Take current screenshots
        run: pnpm exec storycap --serverCmd "pnpm dlx http-server storybook-static -p 6006" http://localhost:6006
        
      - name: Setup screenshot directories
        run: |
          mkdir -p __screenshots__/actual __screenshots__/expected __screenshots__/diff
          mv __screenshots__/*.png __screenshots__/actual/ 2>/dev/null || true

      - name: Get main branch commit hash
        id: main_hash
        run: echo "hash=$(git rev-parse origin/main)" >> $GITHUB_OUTPUT

      - name: Restore expected screenshots from cache
        id: expected_cache
        uses: actions/cache@v4
        with:
          path: __screenshots__/expected/
          key: ${{ runner.os }}-expected-screenshots-${{ steps.main_hash.outputs.hash }}

      - name: Generate expected screenshots from main branch
        if: steps.expected_cache.outputs.cache-hit != 'true'
        run: |
          git checkout origin/main
          pnpm install --frozen-lockfile
          pnpm build-storybook
          pnpm exec storycap --serverCmd "pnpm dlx http-server storybook-static -p 6006" http://localhost:6006
          mv __screenshots__/*.png __screenshots__/expected/ 2>/dev/null || true
          git checkout -

      - name: Save expected screenshots to cache
        if: steps.expected_cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: __screenshots__/expected/
          key: ${{ runner.os }}-expected-screenshots-${{ steps.main_hash.outputs.hash }}

      - name: Run visual regression test
        run: pnpm test:vrt
        continue-on-error: true

      - name: Set artifact name
        id: artifact_name
        run: echo "name=vrt-results-$(echo '${{ github.head_ref }}' | tr '/' '-' | tr ':' '-' | tr '<' '-' | tr '>' '-' | tr '|' '-' | tr '*' '-' | tr '?' '-' | tr '\' '-')-${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Check VRT results
        id: vrt_results
        run: |
          if [ -f "vrt-report.json" ]; then
            echo "report_available=true" >> $GITHUB_OUTPUT
            if [ -f "vrt-report.html" ]; then
              echo "html_available=true" >> $GITHUB_OUTPUT
            else
              echo "html_available=false" >> $GITHUB_OUTPUT
            fi
            
            # Parse results from JSON
            if command -v jq >/dev/null 2>&1; then
              FAILED=$(jq '.failedItems | length' vrt-report.json 2>/dev/null || echo "0")
              NEW=$(jq '.newItems | length' vrt-report.json 2>/dev/null || echo "0")
              PASSED=$(jq '.passedItems | length' vrt-report.json 2>/dev/null || echo "0")
              echo "failed=$FAILED" >> $GITHUB_OUTPUT
              echo "new=$NEW" >> $GITHUB_OUTPUT
              echo "passed=$PASSED" >> $GITHUB_OUTPUT
              
              # Extract item names for detailed reporting
              FAILED_ITEMS=$(jq -r '.failedItems[]' vrt-report.json 2>/dev/null | head -5 | tr '\n' ',' | sed 's/,$//' || echo "")
              NEW_ITEMS=$(jq -r '.newItems[]' vrt-report.json 2>/dev/null | head -5 | tr '\n' ',' | sed 's/,$//' || echo "")
              echo "failed_items=$FAILED_ITEMS" >> $GITHUB_OUTPUT
              echo "new_items=$NEW_ITEMS" >> $GITHUB_OUTPUT
            else
              echo "failed=0" >> $GITHUB_OUTPUT
              echo "new=0" >> $GITHUB_OUTPUT
              echo "passed=0" >> $GITHUB_OUTPUT
              echo "failed_items=" >> $GITHUB_OUTPUT
              echo "new_items=" >> $GITHUB_OUTPUT
            fi
            
            # Check if there are diff images
            DIFF_COUNT=$(find __screenshots__/diff -name "*.png" 2>/dev/null | wc -l || echo "0")
            echo "has_diffs=$( [ "$DIFF_COUNT" -gt 0 ] && echo 'true' || echo 'false' )" >> $GITHUB_OUTPUT
          else
            echo "report_available=false" >> $GITHUB_OUTPUT
            echo "html_available=false" >> $GITHUB_OUTPUT
            echo "failed=0" >> $GITHUB_OUTPUT
            echo "new=0" >> $GITHUB_OUTPUT
            echo "passed=0" >> $GITHUB_OUTPUT
            echo "failed_items=" >> $GITHUB_OUTPUT
            echo "new_items=" >> $GITHUB_OUTPUT
            echo "has_diffs=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4
        if: steps.vrt_results.outputs.html_available == 'true'

      - name: Prepare Pages content
        if: steps.vrt_results.outputs.html_available == 'true'
        run: |
          mkdir -p pages-output/${{ github.head_ref }}
          cp vrt-report.html pages-output/${{ github.head_ref }}/index.html
          
          # Copy all screenshot directories maintaining structure
          if [ -d "__screenshots__/diff" ] && [ "$(ls -A __screenshots__/diff 2>/dev/null)" ]; then
            mkdir -p pages-output/${{ github.head_ref }}/__screenshots__/diff
            cp -r __screenshots__/diff/* pages-output/${{ github.head_ref }}/__screenshots__/diff/
          fi
          if [ -d "__screenshots__/actual" ] && [ "$(ls -A __screenshots__/actual 2>/dev/null)" ]; then
            mkdir -p pages-output/${{ github.head_ref }}/__screenshots__/actual
            cp -r __screenshots__/actual/* pages-output/${{ github.head_ref }}/__screenshots__/actual/
          fi
          if [ -d "__screenshots__/expected" ] && [ "$(ls -A __screenshots__/expected 2>/dev/null)" ]; then
            mkdir -p pages-output/${{ github.head_ref }}/__screenshots__/expected
            cp -r __screenshots__/expected/* pages-output/${{ github.head_ref }}/__screenshots__/expected/
          fi
          
          # Create a simple index page for the root if needed
          if [ ! -f "pages-output/index.html" ]; then
            cat > pages-output/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Visual Regression Test Results</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .branch-link { display: block; padding: 15px; margin: 10px 0; background: #f5f5f5; text-decoration: none; color: #333; border-radius: 5px; }
                  .branch-link:hover { background: #e0e0e0; }
              </style>
          </head>
          <body>
              <h1>Visual Regression Test Results</h1>
              <a href="./${{ github.head_ref }}/" class="branch-link">
                  📊 Latest Results for branch: ${{ github.head_ref }}
              </a>
          </body>
          </html>
          EOF
          fi

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        if: steps.vrt_results.outputs.html_available == 'true'
        with:
          path: pages-output

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        if: steps.vrt_results.outputs.html_available == 'true'
        continue-on-error: true

      - name: Find existing comment
        uses: peter-evans/find-comment@v2
        id: find_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Visual Regression Test Results
        continue-on-error: true

      - name: Create or update PR comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            ## 📸 Visual Regression Test Results
            
            ### Summary
            - 🔴 **Failed**: ${{ steps.vrt_results.outputs.failed }}
            - 🆕 **New**: ${{ steps.vrt_results.outputs.new }}
            - ✅ **Passed**: ${{ steps.vrt_results.outputs.passed }}
            
            ### Details
            ${{ steps.vrt_results.outputs.failed != '0' && steps.vrt_results.outputs.failed_items != '' && format('**❌ Failed items**: {0}', steps.vrt_results.outputs.failed_items) || '' }}
            ${{ steps.vrt_results.outputs.new != '0' && steps.vrt_results.outputs.new_items != '' && format('**🆕 New items**: {0}', steps.vrt_results.outputs.new_items) || '' }}
            
            ### Reports
            - 📊 ${{ steps.vrt_results.outputs.html_available == 'true' && format('[Interactive HTML Report]({0}{1})', steps.deployment.outputs.page_url, github.head_ref) || '⚠️ No HTML report generated' }}
            - 📎 [Download artifacts (${{ steps.artifact_name.outputs.name }})](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            ${{ steps.vrt_results.outputs.has_diffs == 'true' && '- 🖼️ Diff images available in the HTML report' || '' }}
            
            ---
            <details>
            <summary>🔍 How to view results</summary>
            
            **Option 1: HTML Report (Recommended)**
            Click the "Interactive HTML Report" link above to view a comprehensive comparison with side-by-side images.
            
            **Option 2: Download Artifacts**
            1. Click "Download artifacts" link
            2. Download the `vrt-results` artifact
            3. Extract and open `vrt-report.html` in your browser
            
            **Option 3: Individual Images**
            The artifacts contain:
            - `__screenshots__/actual/` - Current branch screenshots
            - `__screenshots__/expected/` - Main branch screenshots  
            - `__screenshots__/diff/` - Highlighted differences
            
            </details>
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact_name.outputs.name }}
          path: |
            vrt-report.html
            vrt-report.json
            __screenshots__/
          retention-days: 30
        if: always()
        
      - name: Create job summary
        if: always()
        run: |
          echo "## 📸 Visual Regression Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Passed | ${{ steps.vrt_results.outputs.passed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔴 Failed | ${{ steps.vrt_results.outputs.failed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🆕 New | ${{ steps.vrt_results.outputs.new }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.vrt_results.outputs.html_available }}" = "true" ]; then
            echo "📊 **Interactive Report**: Available at GitHub Pages" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **No HTML report generated**" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.vrt_results.outputs.has_diffs }}" = "true" ]; then
            echo "🖼️ **Diff images**: Generated and available in artifacts" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Access" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.vrt_results.outputs.html_available }}" = "true" ] && [ -n "${{ steps.deployment.outputs.page_url }}" ]; then
            echo "- [📊 View HTML Report](${{ steps.deployment.outputs.page_url }}${{ github.head_ref }})" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- [📎 Download Artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: Fail if VRT detected changes
        if: steps.vrt_results.outputs.failed != '0'
        run: |
          echo "❌ Visual regression test failed with ${{ steps.vrt_results.outputs.failed }} failed items"
          exit 1